{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","type","placeholder","onChange","handleChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","names","catch","error","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHbC,EAAW,SAACR,GAErB,OADAS,QAAQC,IAAIV,EAAMW,UACX,qBAAKV,UAAU,YAAf,SAEJD,EAAMW,SAASC,KAAI,SAAAR,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNdQ,G,MAAY,SAACb,GAAD,OACrB,uBACIC,UAAU,SACVa,KAAK,SACLC,YAAaf,EAAMe,YACnBC,SAAUhB,EAAMiB,iBCyCTC,E,kDA1Cb,aAAe,IAAD,8BACZ,gBAoBFD,aAAe,SAACE,GAAD,OACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SApBrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJH,E,qDAed,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAET,SAAUkB,OAC1CC,OAAM,SAACC,GAAD,OAAWtB,QAAQC,IAAI,yB,oBAKlC,WAAU,IAAD,EACwBsB,KAAKR,MAA7Bb,EADA,EACAA,SAASU,EADT,EACSA,YACVY,EAAmBtB,EAASuB,QAAO,SAAA9B,GAAO,OAC9CA,EAAQE,KAAK6B,cAAcC,SAASf,EAAYc,kBAElD,OACE,sBAAKlC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEc,YAAY,iBACZE,aAAee,KAAKf,eAEtB,cAAC,EAAD,CAAUN,SAAUsB,W,GArCVI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.898f9f14.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.style.css'\r\n\r\nexport const Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set1&size=180x180`}/>\r\n        <h1>{props.monster.name}</h1>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.style.css';\r\nimport {Card} from '../card/card.component'\r\n\r\nexport const CardList = (props) => {\r\n    console.log(props.monsters)\r\n    return <div className=\"card-list\">\r\n    {\r\n       props.monsters.map(monster => \r\n        <Card key={monster.id} monster={monster}/>\r\n       )\r\n    }\r\n    </div>\r\n} ","import React from \"react\";\r\nimport './search-box.style.css'\r\n\r\nexport const SearchBox = (props) => (\r\n    <input\r\n        className=\"search\"\r\n        type=\"search\" \r\n        placeholder={props.placeholder}\r\n        onChange={props.handleChange}\r\n    />\r\n)\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport { CardList } from \"./components/card-list/card-list.component\";\r\nimport {SearchBox} from './components/search-box/search-box.component'\r\n//import Test from './Test.jsx'\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: ''\r\n    };\r\n    /* if we use this.setState() inside our own method\r\n    we have bind our method with react's \"this\" or use\r\n    es6 arrow function.\r\n    this.handleChange = this.handleChange.bind(this);\r\n    */\r\n  }\r\n  /* block of code inside componentDidMount run as soon as \r\n     component is rendered. \r\n  */\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((names) => this.setState({ monsters: names }))\r\n      .catch((error) => console.log(\"I have an error.\"));\r\n  }\r\n  handleChange = (e) => (\r\n    this.setState({searchField: e.target.value})\r\n  )\r\n  render() {\r\n    const {monsters,searchField} = this.state;\r\n    const filteredMonsters = monsters.filter(monster => \r\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n    )\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Monsters Rolodex</h1>\r\n        <SearchBox\r\n          placeholder=\"search monster\" \r\n          handleChange= {this.handleChange}\r\n        />\r\n        <CardList monsters={filteredMonsters} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}